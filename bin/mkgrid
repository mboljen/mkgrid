#!/usr/bin/env perl
#
# Created:         Di 2020-10-27 11:39:11 CET
# Last modified:   Mi 2022-04-20 00:07:33 CEST
#
# mkgrid:
#    Interpolations scattered data to regular grids using
#    a collocation procedure with prediction and filtering.

use strict;
use warnings;

# Include standard CPAN modules
use autodie;
use File::stat;
use File::Basename;
use File::Temp;
use FindBin qw($Bin $Script);
use Getopt::Long;
use List::Util qw(any max);
use Pod::Usage;
use POSIX qw(strftime);
use Regexp::Common qw(number);
use Spreadsheet::Read::Simple;
use Time::HiRes qw(clock);

# Include most important module
use Math::Collocate;

# Declare variables
my ($infile,$sheetname,$outfile,$sigs,$sign,$sh,$bucket,@range,@grid,@using);
my ($yes,$man,$help,$unlink) = (0,0,0,0);

# Exit if neither STDIN nor arguments are defined
pod2usage(1) if -t STDIN and not @ARGV;

# If being piped
unless ( -t STDIN )
{
    # Remember to unlink file later
    $unlink = 1;

    # Redirect STDIN to temporary file
    my $fh = File::Temp->new(
        TEMPLATE => $Script.'-XXXXXXXX',
        SUFFIX   => '.csv',
        TMPDIR   => 1,
        UNLINK   => 0,
    );
    $infile = $fh->filename;
    while (<STDIN>) { print $fh $_; }
}

# Fetch command line options
GetOptions(
    'i|infile=s' => \$infile,
    'u|using=s'  => \@using,
    'r|range=s'  => \@range,
    'g|grid=s'   => \@grid,
    's|sigs=f'   => \$sigs,
    'n|sign=f'   => \$sign,
    'sh=f'       => \$sh,
    'bucket=i'   => \$bucket,
    'sheet=s'    => \$sheetname,
    'y|yes'      => \$yes,
    'man'        => \$man,
    'help|?'     => \$help,
);

# Show plain old documentation
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

# Allow comma-separated lists of values
@using = split(/,/, join(',', @using));
@range = split(/,/, join(',', @range));
@grid  = split(/,/, join(',', @grid));

# Subroutine to replace integer range specifiers
sub substintrange
{
    my @result;
    my $arg = shift;
    if ($arg =~ m/^($RE{num}{int})$/) { push @result, $1; }
    elsif ($arg =~ m/^($RE{num}{int})\:($RE{num}{int})$/) { push @result, $1 .. $2; }
    else
    {
        die "Invalid item in integer range specification: $arg";
    }
    @result;
}

# Analyse arrays columns and grid
@using = map { substintrange($_) } @using;
@grid  = map { substintrange($_) } @grid;

# If not sheetname is given, take the first one
$sheetname = 1 unless defined $sheetname;

# Show welcome message
printf "\n".
   "This is %s, a perl script to perform a multivariate interpolation\n".
    "written %s\n\n",
        uc($Script),
        strftime("%Y/%m/%d",localtime(stat($Bin)->mtime));


# Read input file and grep reference to spreadsheet
my $book = ReadDataSimple($infile);
my $sheet = $book->sheet($sheetname);

# Remove temporary spreadsheet if read from STDIN
unlink $infile if $unlink;

# If no input data available
die sprintf("At least 2 rows required, found: %d", $sheet->maxrow)
    unless $sheet->maxrow > 1;

# Auto-select columns unless defined
unless (@using)
{
    # Check whether more than one column available
    if ($sheet->maxcol > 1)
    {
        # Auto-select all available columns
        @using = (1 .. $sheet->maxcol);

        # Raise warning
        warn sprintf(
            "Missing option `--using`, auto-selecting columns: %s",
                join(',', map { sprintf("`%d`", $_) } @using ));
    }
    else
    {
        # Raise error
        die sprintf(
            "At least 2 columns required, found: %d",
                $sheet->maxcol);
    }
}

# Check dimension against available columns
die "Out of bounds column identifier in option `--using`, ".
    "received `" . join(',', @using) . "`"
        if any { $_ < 1 or $_ > $sheet->maxcol } @using;

# Initialze dimension
my $dim = scalar @using - 1;

# Instantiate main object
my $obj = Math::Collocate->new(dim => $dim);

# Add points to object
for my $row (1 .. $sheet->maxrow)
{
    my $ref = [];
    for my $col (@using) { push @{$ref}, $sheet->cell($col,$row); }
    $obj->add({ sample => $ref });
}

# Calibrate object
$obj->sign($sign)     if defined $sign;
$obj->sigs($sigs)     if defined $sigs;
$obj->sh($sh)         if defined $sh;
$obj->bucket($bucket) if defined $bucket;

# Calculate grid
my $t0 = clock();
my @result = $obj->interpolate({ range => \@range, grid => \@grid});
my $t1 = clock();

# Fetch parameter
$outfile = shift @ARGV;

# If output filename is defined
if (defined $outfile)
{
    # Quit if output file already exists and option --yes is not set
    die "Output file already exists" if -f $outfile and not $yes;

    # Create output file and redirect STDOUT
    open (my $OUT, '>', $outfile) or die "Cannot create $outfile: $!";
    select $OUT;
}

# Loop over grid points and print each one
for my $i (1 .. scalar @result)
{
    map { printf "%10.3f", $_ } @{$result[$i - 1]};
    print "\n";
    print "\n" if $obj->newline($i);
}

# Reset STDOUT
select STDOUT if defined $outfile;

# Show statistics
printf "%d points computed (time elapsed: %.3f s)\n" .
       "Statistics (prediction: %.3f, filter: %.3f, length: %.3f)\n",
            scalar @result, $t1 - $t0,
            $obj->prediction, $obj->filter, $obj->sh;

# Show file statistics
printf "Output file '%s' created successfully (%d bytes written)\n",
            $outfile, stat($outfile)->size
                if defined $outfile;

__END__


=head1 NAME

mkgrid - Apply collocation with prediction and filtering for scattered data


=head1 SYNOPSIS

B<mkgrid> [I<options>] [F<outfile>]


=head1 DESCRIPTION

B<mkgrid> correlates scattered data of any dimension to a regular grid
making use of the collocation method with prediction and filtering of
Moritz and Wolf.

If no output file F<outfile> is given, the output is directed to STDOUT.


=head1 OPTIONS

=over 4

=item B<-i>, B<--infile>=I<filename>

Sets the filename of the input spreadsheet.  If omitted, input data is read
from STDIN.

=item B<-u>, B<--using>=I<col>[,..],I<col>

Sets the columns of the input spreadsheet to read the sample data from.
More than one abscissa column can be specified.  The last column holds
the value at the given locations.  If omitted, all available columns
are selected.

=item B<--sheet>=I<name>

Sets the name of the spreadsheet the columns of option B<--using> refer to.
If omitted, the first avilable sheet is selected.

=item B<-r>, B<--range>=[I<lbound>]:[I<ubound>][,..]

Sets the output range for which the regular grid data shall be predicted.
Each dimension can be specified using a lower and an upper boundary value
separated by a colon (C<:>).  If either of both values is omitted, the
value will be determined automatically according to the submitted samples.

=item B<-g>, B<--grid>=I<number>[,..]

Sets the discretization for the output regular grid.  If only one value
is given, it will be used for each dimension of the problem.  Multiple
grid values can be given by a comma-separated list.

=item B<-s>, B<--sigs>=I<value>

Sets the signal variance.

=item B<-n>, B<--sign>=I<value>

Sets the noise variance.  Set this value to zero if the sample data is
free of any measurement error.

=item B<--sh>=I<number>

Sets the half width of the problem.  If omitted, the smallest distance
of all given samples is used as default which is usually a good value.

=item B<--bucket>=I<number>

Sets the bucket size, i.e. consider only closest number of points for
interpolation.  If ommitted, all points are used for interpolation.

=item B<-y>, B<--yes>

Overwrite existing output files.

=item B<--man>

Prints the manual page and exits.

=item B<--help>

Prints a brief help message and exits.

=back


=head1 HISTORY

 2020-11-15  Original version


=head1 COPYRIGHT AND LICENSE

MIT License

Copyright (c) 2021 Matthias Boljen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut
